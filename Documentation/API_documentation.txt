--API--
Authentication
Scientist Notebook API uses OAuth 2.0 protocol for authentication.

--Errors--
Scientist Notebook API make use of the standard HTTP Status Codes.

--Endpoints--
All requests are sent to: http://localhost:9090

//Requests for login
POST /login
JSON format in request body: 
{
"email":"mail@gmail.com",
"password":"1234"}
JSON format in response: 
{
"firstName":"Annika",
"lastName":"Magnusson",
"email":"mail@gmail.com",
"password":"1234",
"organization":"MAH",
"department":"computer",
"role":"user"}

// Requests for data
POST /data
JSON format in request body: 
{
"content":"some data",
"author":"Annika Magnusson",
"level":"101",
"dataType":"doc",
"project":"some project",
"name":"data name",
"description":"blablabla",
"tags":["tag1","tag2"]}
When a new data is created the data id will be added to response body. This you can use to get and delete the data.

GET /data/<id>
Incude data id in request
Example http://localhost:9090/data/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Respone will be a JSON Object

GET /data?tags=<tags>
Include all tags separated with comma.
Exampel: http://localhost:9090/data?tags=train,car,cat

DELETE /data/<id>
Include data id in request
Example http://localhost:9090/data/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7

PUT /data/<id>
Not implemented yet

// Requests for users
POST /users
JSON format in request body: 
{
"firstName":"Annika",
"lastName":"Magnusson",
"email":"mail@gmail.com",
"password":"1234",
"organization":"MAH",
"department":"computer",
"role":"user"}
When a new user is created the user id will be added to response body. This you can use to get and delete the user.

GET /users/<id>
Include user id in request
Example http://localhost:9090/users/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object.

PUT /users/<id>
Not implemented yet

DELETE /users/<id>
Example http://localhost:9090/users/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7

// Requests for projects
POST /projects
JSON format in request body: 
{
"field":"some field",
"createdBy":"Annika Magnusson",
"name":"project1",
"status":"ongoing",
"owner":"kristoffer",
"isPrivate":"true",
"projectAbstract":"blablab",
"tags":["tag1","tag2"],
"projectRoles":["role1","role2"],
"fundedBy":["funder1","funder2"],
"funds":["fund1","fund2"],
"members":["member1","member2"],
"employers":["employer1","employer2"],
"departments":["department1","department2"]
}
When a new project is created the project id will be added to response body. This you can use to get and delete the project.

GET /projects/<id>
Include project id in request
Example http://localhost:9090/projects/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object.

GET /projects?tags=<tags>
Include all tags separated with comma.
Exampel: http://localhost:9090/projects?tags=train,car,cat

DELETE /projects/<id>
Include data id in request
Example http://localhost:9090/projects/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7

// Requests for organizations
POST /organizations
JSON format in request body:
{
"name":"organization name",
"description":"blablabla",
"policy":"some policy",
"license":"some license",
"departments":["department1","department2"]}
When a new organization is created the organization id will be added to response body. This you can use to get and delete the organization.

GET /organizations/<id>
Include organization id in request
Example http://localhost:9090/organizations/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object.

DELETE /organizations/<id>
Include organization id in request
Example http://localhost:9090/organizations/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7


--Examples--

--Change log--



