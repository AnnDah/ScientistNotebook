--API--
Authentication
Scientist Notebook API uses OAuth 2.0 protocol for authentication.

--Errors--
Scientist Notebook API make use of the standard HTTP Status Codes.

--Endpoints--
All requests are sent to: http://localhost:9090

--------------------------------------------------------

--LOGIN--

// Login a user
POST /login
JSON format in request body: 
{
"email":"mail@gmail.com",
"password":"1234"}
JSON format in response: 
{
"firstName":"Annika",
"lastName":"Magnusson",
"email":"mail@gmail.com",
"password":"1234",
"organization":"MAH",
"department":"computer",
"role":"user"}

--------------------------------------------------------
--------------------------------------------------------

--DATA--

// Create a new data
POST 
/data

JSON format in request body: 
{
"content":"some data",
"author":"Annika Magnusson",
"level":"101",
"dataType":"doc",
"project":"some project",
"name":"data name",
"description":"blablabla",
"tags":["tag1","tag2"]
}
Response will be a JSON Object.



// Get a specific data
GET 
/data/<id>

Incude data id in request
Example http://localhost:9090/data/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object



// Get result of data through search with tags
GET 
/data?tags=<tags>

Include all tags separated with comma.
Exampel: http://localhost:9090/data?tags=train,car,cat
Response will include:
	id
	name
	author
	created
	description



// Get all data from one user
GET 
/data/user/<userid>

Exampel: http://localhost:9090/data/user/99fd549f-518e-468e-8434-cd7b0e4274e3
Response will include:
	id
	name
	author
	created
	description



// Get all data from one project
GET 
/data/project/<projectid>

Exampel: http://localhost:9090/data/project/21d06407-72bf-4554-8be9-27bbc3d2fcd2
Response will include:
	id
	name
	author
	created
	description



// Delete a specific data
DELETE 
/data/<id>

Include data id in request
Example http://localhost:9090/data/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7



// Update a specific data
PUT 
/data/<id>

Include old values per default and replace those values that are to be updated.
The id of the user performing the update needs to be included in the JSON. This the front end application will add.
An description of the update needs to be included in the JSON. This the user will add.
JSON format in request body:
{
"content":"some data",
"author":"Annika Magnusson",
"level":"101",
"dataType":"doc",
"project":"some project",
"name":"data name",
"description":"blablabla",
"tags":["tag1","tag2"],
"user":"id on the user who makes the request",
"revisionDescription":"some description of the revision"
}

Response will be the updated data in JSON format.

--------------------------------------------------------
--------------------------------------------------------

--USERS--

// Create a new user
POST
/users

JSON format in request body: 
{
"firstName":"Annika",
"lastName":"Magnusson",
"email":"mail@gmail.com",
"password":"1234",
"organization":"MAH",
"department":"computer",
"role":"user"
}
Response will be a JSON Object.



// Get a specific user
GET 
/users/<id>

Include user id in request
Example http://localhost:9090/users/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object.



// Update a specific user
PUT 
/users/<id>

Include old values per default and replace those values that are to be updated.
JSON format in request body:
{
"firstName":"Annika",
"lastName":"Magnusson",
"email":"mail@gmail.com",
"password":"1234",
"organization":"MAH",
"department":"computer",
"role":"user",
"follows":["annika","sebastian"]
}

Response will be the updated user in JSON format.



// Update user and project to add a user as follower to a project
PUT
/users/<userId>/<projectId>



// Delete a specific user
DELETE 
/users/<id>

Example http://localhost:9090/users/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7

--------------------------------------------------------
--------------------------------------------------------

--PROJECTS--

// Create a new project
POST 
/projects

JSON format in request body: 
{
"field":"some field",
"createdBy":"Annika Magnusson",
"name":"project1",
"status":"ongoing",
"owner":"kristoffer",
"isPrivate":"true",
"description":"blablab",
"tags":["tag1","tag2"],
"projectRoles":["role1","role2"],
"fundedBy":["funder1","funder2"],
"funds":["fund1","fund2"],
"members":["member1","member2"],
"employers":["employer1","employer2"],
"departments":["department1","department2"]
}
Response will be a JSON Object.



// Get a specific project
GET 
/projects/<id>

Include project id in request
Example http://localhost:9090/projects/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object.



// Get result of projects through search with tags
GET 
/projects?tags=<tags>

Include all tags separated with comma.
Exampel: http://localhost:9090/projects?tags=train,car,cat
Response will include:
	id
	name
	status
	description
	created
	isPrivate



// Delete a specific project
DELETE 
/projects/<id>

Include data id in request
Example http://localhost:9090/projects/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7



// Update a specific project
PUT 
/projects/<id>

Include old values per default and replace those values that are to be updated.
JSON format in request body:
{
"field":"some field",
"createdBy":"Annika Magnusson",
"name":"project1",
"status":"ongoing",
"owner":"kristoffer",
"isPrivate":"true",
"description":"blablab",
"tags":["tag1","tag2"],
"projectRoles":["role1","role2"],
"fundedBy":["funder1","funder2"],
"funds":["fund1","fund2"],
"members":["member1","member2"],
"employers":["employer1","employer2"],
"departments":["department1","department2"],
"followers":["kristoffer","natalia","diana"]
}

Response will be the updated project in JSON format.

--------------------------------------------------------
--------------------------------------------------------

--ORGANIZATIONS--

// Create a new organization
POST 
/organizations

JSON format in request body:
{
"name":"organization name",
"description":"blablabla",
"policy":"some policy",
"license":"some license",
"departments":["department1","department2"]
}

Response will be a JSON Object.



// Get a specific organization
GET 
/organizations/<id>

Include organization id in request
Example http://localhost:9090/organizations/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7
Response will be a JSON Object.



// Delete a specific organization
DELETE 
/organizations/<id>

Include organization id in request
Example http://localhost:9090/organizations/1ee9815f-a3c0-4fad-9f5a-4cb466ae74c7



// Update a specific organization
PUT 
/organizations/<id>

Include old values per default and replace those values that are to be updated.
JSON format in request body:
{
"name":"organization name",
"description":"blablabla",
"policy":"some policy",
"license":"some license",
"departments":["department1","department2"]
}

Response will be the updated organization in JSON format.


--Examples--

--Change log--



